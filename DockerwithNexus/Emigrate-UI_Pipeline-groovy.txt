pipeline {
      agent any
       tools {
        // Define Node.js installation
        nodejs 'NodeJS 16.17.0'
    }
      environment {
        NODE_VERSION = '16.17.0'
    }
	 
	  
     stages{
         
	    stage("Code"){
		   steps {
		       
		    echo "Cloning the code"
			  git branch: '${BRANCH_NAME}',
              credentialsId: '3a80fdd9-2005-4d60-a3e2-7f7c195c9f76',
              url: 'https://apps.trigyn.com/gitlab/emigrate/emigrate.git'
             // url: 'https://apps.trigyn.com/gitlab/emigrate/emigratecdn.git'
		   
		   }
		}
		stage('Getting packages') {
            steps {
                script {
                    // Set npmrc file
                    def npmrcContent = """
                        registry=https://registry.npmjs.org/
                        // Specify any other npm configuration here
                    """
                    writeFile file: '.npmrc', text: npmrcContent

                  
                }
                    echo "Installing dependencies"
		            sh "npm install --force"
		            sh "npm run package" 
            }
        }
		
		stage("Build"){
		   steps {
		    //echo "Installing dependencies"
		    // sh "npm install"
		    // sh "npm run package" 
		    // sh "npm run build:uat"
		    
		    script {
		    if ("${ENVIRONMENT}" == 'DOCKER-DEV') {
            sh  "npm run build:dockerdev -- --base-href /emigrateSIT/ --deploy-url /emigrateSIT/" 
            }
            else if ("${ENVIRONMENT}" == 'UAT') {
            sh  "npm run build:clientUat -- --base-href /emigrateUAT/ --deploy-url /emigrateUAT/" 
            }
            else if ("${ENVIRONMENT}" == 'DATA-MIGRATION') {
            sh "npm run build:dm -- --base-href / --deploy-url /"
           }
            else if ("${ENVIRONMENT}" == 'DOCKER-KUBE') {
            sh "npm run build:dkub"
           }
            else if ("${ENVIRONMENT}" == 'UATK8SPROD') {
            sh "npm run build:uat"
           }
           else if ("${ENVIRONMENT}" == 'PROD') {
            sh "npm run build:prodlive"
           }
           
		    }
		    
		   }		
		}
		
		
		stage('Zip Directory') {
          steps {
             script {
                 sh "rm -rf *.zip"
                dir('dist/') {
                sh "zip -r ../e-migrate-${ENVIRONMENT}.zip ./e-migrate"
            }
           }
         }
        }
		
	    stage("Archive Artifacts"){
	        steps {
	            echo "Archiving Artifacts"
	            archiveArtifacts artifacts: '*.zip', onlyIfSuccessful: true, fingerprint: true, followSymlinks: false
	        }
	    }	
		
	
		stage("Upload Artifacts Nexus"){
		   steps {
		    echo "${BUILD_NUMBER}"
		    echo "uploading artifacts to nexus"
		    nexusArtifactUploader artifacts: [[artifactId: 'e-migrate-${ENVIRONMENT}', classifier: '${BUILD_NUMBER}', file: '${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/archive/e-migrate-${ENVIRONMENT}.zip', type: 'zip']], credentialsId: '70f0d661-f381-460a-b18a-cffaa01ad2bc', groupId: 'in.gov.emigrate', nexusUrl: '${NEXUS_URL}', nexusVersion: 'nexus3', protocol: 'http', repository: 'emigrate-services-release-repo', version: 'Release'
		   
		   }
		}
		
		stage("Deployment to the server"){
		 steps {
		     script {
		         echo "Deployment"
                def commands = """
                    echo "${BUILD_NUMBER}"
                    cd /var/www/newbuild/
                    sh copyEmigrateUI.sh ${BUILD_NUMBER}
            """
		         
                 
                    
               echo "Running Script on NODE1"
               sh "ssh -t root@192.168.150.22 '$commands'"
		     }
		 }
		}
		
		stage("Docker Image"){
		   steps {
		    echo "${BUILD_NUMBER}"
		    echo ""
		    
		   }
		}
		
		
	 } 
}